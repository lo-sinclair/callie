<?php

/**
 * @file
 * Module file for callie.
 */
//module_load_include('inc', 'callie', 'inc/callie.field');







/**
 * Implements hook_entity_info().
 *
 * This is the fundamental description of the entity.
 *
 * It provides a single entity with a single bundle and without revision
 * support.
 */
function callie_entity_info() {
  $info['callie_form'] = array(
    'label' => t('Callie Form'),
    'controller class' => 'CallieFormController',
    'base table' => 'callie_form',
    'uri callback' => 'callie_form_uri',
    'fieldable' => TRUE,

    'entity keys' => array(
      'id' => 'cfid',
    ),

    'static cache' => FALSE,
    'bundles' => array(
      'callie_form' => array(
        'label' => 'Callie bundle',
        /*'admin' => array(
          'path' => 'admin/structure/callie_form/manage',
          'access arguments' => array('administer callie_form entities'),
        ),*/
      ),
    ),
    'view modes' => array(
      'tweaky' => array(
        'label' => t('Tweaky'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $info;
}



/**
 * Fetch a callie_form object.
 */
function callie_form_load($cfid = NULL, $reset = FALSE) {
  $cfids = (isset($cfid) ? array($cfid) : array());
  $callie_form = callie_form_load_multiple($cfids, array(), $reset);
  return $callie_form ? reset($callie_form) : FALSE;
}



/**
 * Loads multiple callie_form entities.
 */
function callie_form_load_multiple($cfids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('callie_form', $cfids, $conditions, $reset);
}

/**
 * Loads multiple callie_form entities with basic fields.
 */
function callie_form_load_basic($cfids = FALSE) {
  $query = db_select('callie_form', 'cf')
    ->fields('cf');
   if ($cfids)
      $query->condition('cf.cfid', $cfids, 'IN');
  $result = $query->execute()
  ->fetchAllAssoc('cfid');
  if (empty($result))
    return false;
  return $result;
}


/**
 * Implements the uri callback.
 */
function callie_form_uri($callie_form) {
  return array(
    'path' => 'admin/callie_form/' . $callie_form->cfid,
  );
}



/**
 * Implements hook_menu().
 */
function callie_menu() {
  $items['callie'] = array(
    'title' => 'Callie',
    'page callback' => 'callie_info_page',
    'access arguments' => array('view any callie_form entity'),
  );

  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in basic_entity_info() above.
  $items['admin/structure/callie_form/manage'] = array(
    'title' => 'Callie',
    'page callback' => 'callie_form_list_entities',
    'access arguments' => array('administer callie_form entities'),
  );

  $items['admin/structure/callie_form/manage/add'] = array(
    'title' => 'Add an callie form Entity',
    'page callback' => 'callie_form_add',
    'access arguments' => array('create callie_form entities'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/structure/callie_form/manage/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0, 
  );

  $items['admin/structure/callie_form/manage/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('callie_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'tab parent' => 'admin/structure/callie_form/manage',
    'weight' => 1, 
  );

  $items['admin/callie_form/%callie_form'] = array(
    'title callback' => 'callie_form_title',
    'title arguments' => array(2),
    'page callback' => 'callie_form_view',
    'page arguments' => array(2),
    'access arguments' => array('view any callie_form entity'),
  );

  $items['admin/callie_form/%callie_form/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/callie_form/%callie_form/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('callie_form_form', 2),
    'access arguments' => array('edit any callie_form entity'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/callie_form/%callie_form/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('callie_form_delete_confirm', 2),
    'access arguments' => array('delete any callie_form entity'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  $items['admin/callie_form/add'] = array(
    'title' => 'Add an Entity Example Basic Entity',
    'page callback' => 'callie_form_add',
    'access arguments' => array('create callie_form entities'),
  );

  $items['ajax-mail'] = array(
      'access callback' => TRUE,
      'page callback' => 'callie_ajax_mail',
      'type' => MENU_CALLBACK
  );

   $items['form-get'] = array(
      'page callback' => 'callie_ajax_get',
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
      
  );
  return $items;
}


function callie_settings_form($form, &$form_state) {
  $form = array();
 
  $form['callie_sent_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Sent timeout'),
    '#size' => 10,
    '#default_value' => variable_get('callie_sent_timeout', 1200), 
    '#element_validate' => array('element_validate_integer_positive'), 
    '#required' => TRUE,
  );

  return system_settings_form($form);
}



/**
 * Implements hook_permission().
 */
function callie_permission() {
  $permissions = array(
    'administer callie_form entities' => array(
      'title' => t('Administer callie_form entities'),
    ),
    'view any callie_form entity' => array(
      'title' => t('View any callie_form entity'),
    ),
    'edit any callie_form entity' => array(
      'title' => t('Edit any callie_form entity'),
    ),
    'create callie_form entities' => array(
      'title' => t('Create callie_form Entities'),
    ),
  );
  return $permissions;
}



/**
 * Basic information for the page.
 */
function callie_info_page() {
  $content['preface'] = array(
    '#type' => 'item',
    '#markup' => t('The callie provides a callie form.'),
  );
  if (user_access('administer callie_form entities')) {
    $content['preface']['#markup'] = t('You can administer these and add fields and change the view !link.',
      array('!link' => l(t('here'), 'admin/structure/callie_form/manage'))
    );
  }
  $content['table'] = callie_form_list_entities();

  return $content;
}



/**
 * Implements hook_theme().
 */
function callie_theme() {
  $module_path = drupal_get_path('module', 'callie');

  return array(
    'callie_form' => array(
      'variables' => array(
                'cfid' => NULL,
                'fields' => Array(),
                'btn_text' => NULL,
            ),
      'template' => 'callie-form',
      'pattern' => 'callie-form__',
      'path' => $module_path.'/theme',
    ),
  );
}


function callie_ajax_get($cfid = 1) {
  $entity = array_shift(entity_load('callie_form', array($cfid)));
  $vars = Array(
    'cfid' => $entity->cfid,
    'title' => $entity->title,
    'mode' => $entity->mode,
    'submit_btn_text' => $entity->submit_btn_text,
    'form_fields' => Array()
    );

  $fields = field_get_items('callie_form', $entity, 'field_form_fields');
  foreach ($fields  as $field) {
     $vars['form_fields'][($field['name'])] = field_view_value('callie_form', $entity, 'field_form_fields', $field, array('type' => 'callie_field_simple_input_formatter'));
  }

  $output = theme('callie_form__'.$cfid, $vars);

  return drupal_json_output($output);
}



function callie_help_form($form, &$form_state, $entity) {
  switch ($entity->mode) {
    case 'floating':
      $title = t('Button code:');
      $description = t('You can insert this HTML code into any place template or page content');
      $html = "<a class=\"callie-form-open\" form-id=\"callie-form-" . $entity->cfid ."\" href=\"#\">" . $entity->open_btn_text . "</a>";
      $rows = 1;
      break;

    case 'inbuilt':
      $title = t('Container Code:');
      $description = t('You can insert this HTML code into any place template or page content, there appeared to this form');
      $html = "<div class=\"callie-form\" id=\"callie-form-" . $entity->cfid. "\"></div>";
      $rows = 1;
      break;
    
    default:
      $title = "";
      $description = "";
      $html = "";
      $rows = 3;
      break;
  }

 $form['title'] = array(
        '#type' => 'textarea',
        '#rows' => $rows,
        '#cols' => 8,
        '#resizable' => FALSE,
        '#title' => $title,
        '#disabled' => TRUE,
        '#default_value' => $html,
        '#description' => $description,
      );

  return $form;
}


function callie_form_list_entities() {
  $path = drupal_get_path('module', 'callie');
  drupal_add_css($path . '/css/admin.css');
  drupal_add_js($path . '/js/admin.js');
  
  $content = array();
  // Load all of our entities.
  $entities = callie_form_load_multiple();

  

  if (!empty($entities)) {
    $destination = drupal_get_destination();
    

    foreach ($entities as $entity) {
      // Create tabular rows for our entities.
      $operations = Array();
      $operations['edit'] = array(
        'title' => t('edit'),
        'href' => 'admin/callie_form/' . $entity->cfid . '/edit',
        'query' => $destination,
      );
      $operations['delete'] = array(
        'title' => t('delete'),
        'href' => 'admin/callie_form/' . $entity->cfid . '/delete',
        'query' => $destination,
      );

$outputout = "<div class='callie-help'>";  
$outputout .= "<div class='callie-help-open'>"
       . l($entity->title, '') 
       ."</div>";
$outputout .= "<div class='callie-help-content'>"
       . render(drupal_get_form('callie_help_form', $entity)) 
       ."</div>";
$outputout .= "</div>"; 

$title = l($entity->title, '');

      $rows[] = array(
        'data' => array(
          'id' => $entity->cfid,
          //'title' => l($entity->title, 'admin/callie_form/' . $entity->cfid),
          'title' => $outputout,
          'mode' => $entity->mode,
          'operations' => array('data' => array(
            '#theme' => 'links__node_operations',
            '#links' => $operations,
            '#attributes' => array('class' => array('links', 'inline')),
          )),
        ),
      );
    }
    $header = array(
      array('data' => t('ID')),
      array('data' => t('Title'), 'width' => '500px'),
      array('data' => t('Type')),
      array('data' => t('Operations')),
    );
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => $header,
    );
  }
  else {
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No callie_form entities currently exist.'),
    );
  }
  return $content;
}


/**
 * Callback for a page title when this entity is displayed.
 */
function callie_form_title($entity) {
  return t('Callie Form: @title', array('@title' => $entity->title));
}



function callie_form_view($entity, $view_mode = 'tweaky') {
  $entity_type = 'callie_form';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );

  field_attach_prepare_view($entity_type, array($entity->cfid => $entity),
    $view_mode);
  
  entity_prepare_view($entity_type, array($entity->cfid => $entity));
  
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  $entity->content['title'] = array(
    '#type' => 'item',
    '#title' => t('Item Title'),
    '#markup' => $entity->title,
  );

  $entity->content['mode'] = array(
    '#type' => 'item',
    '#title' => t('Item Mode'),
    '#markup' => $entity->mode,
  );

  global $language;
  $langcode = $language->language;
  
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
 
  drupal_alter(array('callie_form_view', 'entity_view'),
    $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}



function callie_field_extra_fields() {
  $return = array();
  $return['callie_form']['callie_form'] = array(
    'form' => array(
      'title' => array(
        'label' => t('Title'),
        'description' => t('Example entity module title form element'),
        'weight' => -10,
      ),
      'mode' => array(
        'label' => t('Mode'),
        'weight' => -9,
      ),
    ),
  );

  return $return;
}



/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function callie_form_add() {
  $entity = entity_get_controller('callie_form')->create();
  return drupal_get_form('callie_form_form', $entity);
}




function callie_form_form($form, &$form_state, $entity) {

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => $entity->title,
  );
  $form['set'] = array(
    '#type' => 'fieldset',
    '#title' => t('Mode of dispay'),
    '#weight' => 10,
  );
  $form['set']['mode'] = array(
    '#type' => 'select',
    '#title' => t('Mode'),
    '#required' => TRUE,
    '#default_value' => $entity->mode,
    '#options' => array(
      'floating' => 'floating',
      'inbuilt' => 'inbuilt',
    ),
  );
  $form['set']['open_btn_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Open button text'),
    '#default_value' => 'Call me',
    '#size' => 14,
    '#states' => array(
      'visible' => array(
        'select[name="mode"]' => array('value' => 'floating')
      )
    ),
  );
  $form['submit_btn_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Submit button text'),
    '#default_value' => $entity->submit_btn_text,
    '#size' => 20,
  );
  $form['callie_form'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  field_attach_form('callie_form', $entity, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('callie_form_delete_confirm'),
    '#weight' => 200,
  );

  return $form;
}


function callie_form_delete_confirm($form, &$form_state, $entity) {
  $form['callie_form'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  return confirm_form($form,
    t('Are you sure you want to delete %title?', array('%title' => $entity->title)),
    'admin/structure/callie_form/manage/list',
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}


function callie_form_form_validate($form, &$form_state) {
  field_attach_form_validate('callie_form', $form_state['values']['callie_form'], $form, $form_state);
}

/**
 * Form submit handler: Submits basic_add_form information.
 */
function callie_form_form_submit($form, &$form_state) {
  $entity = $form_state['values']['callie_form'];
  $entity->title = $form_state['values']['title'];
  $entity->mode = $form_state['values']['mode'];
  $entity->submit_btn_text = $form_state['values']['submit_btn_text'];
  field_attach_submit('callie_form', $entity, $form, $form_state);
  $entity = callie_form_save($entity);
  $form_state['redirect'] = 'admin/structure/callie_form/manage/list';
}


function callie_form_edit_delete($form, &$form_state) {
  $entity = $form_state['values']['callie_form'];
  callie_form_delete($entity);
  drupal_set_message(t('The entity %title (ID %id) has been deleted',
    array('%title' => $entity->title, '%id' => $entity->cfid))
  );
  $form_state['redirect'] = 'admin/structure/callie_form/manage/list';
}



function callie_form_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $entity = $form_state['values']['callie_form'];
    callie_form_delete($entity);
    cache_clear_all();
    drupal_set_message(t('Callie Form: %title has been deleted.', array('%title' => $entity->title)));
  }
  $form_state['redirect'] = 'admin/structure/callie_form/manage/list';
}



function callie_form_save(&$entity) {
  return entity_get_controller('callie_form')->save($entity);
}



function callie_form_delete($entity) {
  entity_get_controller('callie_form')->delete($entity);
}




/**
 * CallieFormControllerInterface definition.
 * @see hook_entity_info_alter()
 */
interface CallieFormControllerInterface
  extends DrupalEntityControllerInterface {

  /**
   * Create an entity.
   */
  public function create();

  /**
   * Save an entity.
   *
   * @param object $entity
   *   The entity to save.
   */
  public function save($entity);

  /**
   * Delete an entity.
   *
   * @param object $entity
   *   The entity to delete.
   */
  public function delete($entity);

}



/**
 * CallieFormController extends DrupalDefaultEntityController.
 */
class CallieFormController
  extends DrupalDefaultEntityController
  implements CallieFormControllerInterface {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  /**
   * Create and return a new entity_example_basic entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'callie_form';
    $entity->container = NULL;
    $entity->button = NULL;
    $entity->submit_btn_text = '';
    $entity->open_btn_text = '';
    $entity->cfid = 0;
    $entity->title = '';
    $entity->mode = 'floating';
    return $entity;
  }

  /**
   * Saves the custom fields using drupal_write_record().
   */
  public function save($entity) {
    // If our entity has no basic_id, then we need to give it a
    // time of creation.
   
    // Invoke hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'callie_form');
    // The 'primary_keys' argument determines whether this will be an insert
    // or an update. So if the entity already has an ID, we'll specify
    // basic_id as the key.
    $primary_keys = $entity->cfid ? 'cfid' : array();
    // Write out the entity record.
    drupal_write_record('callie_form', $entity, $primary_keys);
    // We're going to invoke either hook_entity_update() or
    // hook_entity_insert(), depending on whether or not this is a
    // new entity. We'll just store the name of hook_entity_insert()
    // and change it if we need to.
    $invocation = 'entity_insert';
    // Now we need to either insert or update the fields which are
    // attached to this entity. We use the same primary_keys logic
    // to determine whether to update or insert, and which hook we
    // need to invoke.
    if (empty($primary_keys)) {
      field_attach_insert('callie_form', $entity);
    }
    else {
      field_attach_update('callie_form', $entity);
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, $entity, 'callie_form');
    return $entity;
  }

  /**
   * Delete a single entity.
   *
   * Really a convenience function for deleteMultiple().
   */
  public function delete($entity) {
    $this->deleteMultiple(array($entity));
  }

  /**
   * Delete one or more entity_example_basic entities.
   *
   * Deletion is unfortunately not supported in the base
   * DrupalDefaultEntityController class.
   *
   * @param array $entities
   *   An array of entity IDs or a single numeric ID.
   */
  public function deleteMultiple($entities) {
    $cfids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'callie_form');
          field_attach_delete('callie_form', $entity);
          $cfids[] = $entity->cfid;
        }
        db_delete('callie_form')
          ->condition('cfid', $cfids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('callie', $e);
        throw $e;
      }
    }
  }
}

/**
 * @} End of "defgroup entity_example".
 */



/**
 * Implements hook_page_build().
 */
function callie_page_build(&$page) {
  $path = drupal_get_path('module', 'callie');
  $forms = callie_form_load_basic();
  foreach($forms as $id => $form){
    $forms['callie-form-'.$id] = $form;
    unset($forms[$id]);
  }
  if ( $forms && (arg(0) != "admin")) {
    drupal_add_js(Array('callie_forms'=>$forms), 'setting');
    drupal_add_js($path . '/js/callie.js');
  }
}


/**
 * Implements hook_token_info().
 */
function callie_token_info() {
  // Описываем новый тип токена.
  $type = array(
    'name' => t('Products'), // Человеко-понятное название токена.
    'description' => t('Tokens related to individual products.'), // Описание токена.
    'needs-data' => 'callie-form', // Тип данных.
  );
 
  $callie_form = array();
 
  $callie_form['id'] = array(
    'name' => t('Product ID'),
    'description' => t('The unique ID of the callie_form.'),
  );
  $callie_form['title'] = array(
    'name' => t('Title'),
    'description' => t('The title of the callie_form.'),
  );

 
  return array(
    'types' => array('callie-form' => $type),
    'tokens' => array('callie-form' => $callie_form),
  );
}